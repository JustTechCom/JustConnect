generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = "postgresql://justadmin:0KJoeWqDaYo3DV4Tw36htNPa0yPRNu7Y@dpg-d1lq8jfdiees7380hrug-a/justconnect"
}


model User {
  id          String   @id @default(cuid())
  email       String   @unique
  username    String   @unique
  firstName   String
  lastName    String
  avatar      String?
  bio         String?
  isOnline    Boolean  @default(false)
  lastSeen    DateTime @default(now())
  password    String
  verified    Boolean  @default(false)
  role        Role     @default(USER)
  banned      Boolean  @default(false)
  banReason   String?
  banExpiresAt DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  sentMessages     Message[] @relation("MessageSender")
  chatMembers      ChatMember[]
  createdChats     Chat[]    @relation("ChatCreator")
  files            File[]
  subscriptions    Subscription[]
  invoices         Invoice[]

  @@map("users")
}

model Chat {
  id            String     @id @default(cuid())
  name          String?
  type          ChatType   @default(DIRECT)
  avatar        String?
  description   String?
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  createdBy     String
  lastMessage   String?
  lastMessageAt DateTime?

  creator     User         @relation("ChatCreator", fields: [createdBy], references: [id])
  members     ChatMember[]
  messages    Message[]

  @@map("chats")
}

model ChatMember {
  id       String @id @default(cuid())
  chatId   String
  userId   String
  role     MemberRole @default(MEMBER)
  joinedAt DateTime   @default(now())

  chat Chat @relation(fields: [chatId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([chatId, userId])
  @@map("chat_members")
}

model Message {
  id        String      @id @default(cuid())
  content   String
  type      MessageType @default(TEXT)
  chatId    String
  senderId  String
  replyTo   String?
  edited    Boolean     @default(false)
  delivered Boolean     @default(false)
  read      Boolean     @default(false)
  fileId    String?
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  chat     Chat     @relation(fields: [chatId], references: [id], onDelete: Cascade)
  sender   User     @relation("MessageSender", fields: [senderId], references: [id])
  file     File?    @relation(fields: [fileId], references: [id])
  replyToMessage Message? @relation("MessageReply", fields: [replyTo], references: [id])
  replies        Message[] @relation("MessageReply")

  @@map("messages")
}

model File {
  id          String   @id @default(cuid())
  userId      String
  filename    String
  mimeType    String
  size        Int
  s3Key       String
  url         String
  thumbnailUrl String?
  duration    Int?
  metadata    Json?
  createdAt   DateTime @default(now())
  
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages    Message[]

  @@map("files")
}

model Subscription {
  id                   String   @id @default(cuid())
  userId               String
  planId               String
  stripeSubscriptionId String   @unique
  stripeCustomerId     String
  status               String
  currentPeriodStart   DateTime
  currentPeriodEnd     DateTime
  cancelledAt          DateTime?
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("subscriptions")
}

model Invoice {
  id          String   @id @default(cuid())
  userId      String
  amount      Float
  currency    String
  description String
  status      String
  dueDate     DateTime
  paidAt      DateTime?
  createdAt   DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("invoices")
}

model Broadcast {
  id        String   @id @default(cuid())
  title     String
  message   String
  type      String
  sentBy    String
  sentAt    DateTime
  createdAt DateTime @default(now())

  @@map("broadcasts")
}

enum Role {
  USER
  ADMIN
  MODERATOR
}

enum ChatType {
  DIRECT
  GROUP
  CHANNEL
}

enum MemberRole {
  ADMIN
  MODERATOR
  MEMBER
}

enum MessageType {
  TEXT
  IMAGE
  FILE
  AUDIO
  VIDEO
  LOCATION
}