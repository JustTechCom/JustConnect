version: '3.8'

services:
  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: justconnect-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - backend
      - frontend
    restart: unless-stopped
    networks:
      - justconnect-network

  # Backend API
  backend:
    build:
      context: ../backend
      dockerfile: Dockerfile.prod
    container_name: justconnect-backend
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://justadmin:0KJoeWqDaYo3DV4Tw36htNPa0yPRNu7Y@dpg-d1lq8jfdiees7380hrug-a/justconnect
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=${JWT_SECRET}
      - JWT_REFRESH_SECRET=${JWT_REFRESH_SECRET}
      - FRONTEND_URL=https://${DOMAIN_NAME}
    depends_on:
      - postgres
      - redis
    restart: unless-stopped
    networks:
      - justconnect-network
    volumes:
      - ./uploads:/app/uploads
      - ./logs/backend:/app/logs

  # Frontend
  frontend:
    build:
      context: ../frontend
      dockerfile: Dockerfile.prod
      args:
        - REACT_APP_API_URL=https://${DOMAIN_NAME}/api
        - REACT_APP_SOCKET_URL=https://${DOMAIN_NAME}
    container_name: justconnect-frontend
    restart: unless-stopped
    networks:
      - justconnect-network

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: justconnect-postgres
    environment:
      - POSTGRES_DB=justconnect_prod
      - POSTGRES_USER=justconnect
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --locale=C
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backups:/backups
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    restart: unless-stopped
    networks:
      - justconnect-network
    command: >
      postgres 
      -c max_connections=200
      -c shared_buffers=256MB
      -c effective_cache_size=1GB
      -c maintenance_work_mem=64MB
      -c checkpoint_completion_target=0.9
      -c wal_buffers=16MB
      -c default_statistics_target=100
      -c random_page_cost=1.1
      -c effective_io_concurrency=200

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: justconnect-redis
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
      - ./redis/redis.conf:/etc/redis/redis.conf
    restart: unless-stopped
    networks:
      - justconnect-network

  # Monitoring - Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: justconnect-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - justconnect-network

  # Monitoring - Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: justconnect-grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    restart: unless-stopped
    networks:
      - justconnect-network

  # Log Management - Elasticsearch
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.5.0
    container_name: justconnect-elasticsearch
    environment:
      - discovery.type=single-node
      - ES_JAVA_OPTS=-Xms512m -Xmx512m
      - xpack.security.enabled=false
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    restart: unless-stopped
    networks:
      - justconnect-network

  # Log Management - Kibana
  kibana:
    image: docker.elastic.co/kibana/kibana:8.5.0
    container_name: justconnect-kibana
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch
    restart: unless-stopped
    networks:
      - justconnect-network

  # Backup Service
  backup:
    build: ./backup
    container_name: justconnect-backup
    environment:
      - DB_HOST=postgres
      - DB_NAME=justconnect_prod
      - DB_USER=justconnect
      - DB_PASSWORD=${DB_PASSWORD}
      - S3_BUCKET=${BACKUP_S3_BUCKET}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
    volumes:
      - ./backups:/backups
      - /var/run/docker.sock:/var/run/docker.sock
    depends_on:
      - postgres
    restart: unless-stopped
    networks:
      - justconnect-network

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:
  elasticsearch_data:

networks:
  justconnect-network:
    driver: bridge